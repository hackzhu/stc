                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _smgduan
                                     12 	.globl _main
                                     13 	.globl _At24c02Read
                                     14 	.globl _At24c02Write
                                     15 	.globl _TF2
                                     16 	.globl _EXF2
                                     17 	.globl _RCLK
                                     18 	.globl _TCLK
                                     19 	.globl _EXEN2
                                     20 	.globl _TR2
                                     21 	.globl _C_T2
                                     22 	.globl _CP_RL2
                                     23 	.globl _T2CON_7
                                     24 	.globl _T2CON_6
                                     25 	.globl _T2CON_5
                                     26 	.globl _T2CON_4
                                     27 	.globl _T2CON_3
                                     28 	.globl _T2CON_2
                                     29 	.globl _T2CON_1
                                     30 	.globl _T2CON_0
                                     31 	.globl _PT2
                                     32 	.globl _ET2
                                     33 	.globl _CY
                                     34 	.globl _AC
                                     35 	.globl _F0
                                     36 	.globl _RS1
                                     37 	.globl _RS0
                                     38 	.globl _OV
                                     39 	.globl _F1
                                     40 	.globl _P
                                     41 	.globl _PS
                                     42 	.globl _PT1
                                     43 	.globl _PX1
                                     44 	.globl _PT0
                                     45 	.globl _PX0
                                     46 	.globl _RD
                                     47 	.globl _WR
                                     48 	.globl _T1
                                     49 	.globl _T0
                                     50 	.globl _INT1
                                     51 	.globl _INT0
                                     52 	.globl _TXD
                                     53 	.globl _RXD
                                     54 	.globl _P3_7
                                     55 	.globl _P3_6
                                     56 	.globl _P3_5
                                     57 	.globl _P3_4
                                     58 	.globl _P3_3
                                     59 	.globl _P3_2
                                     60 	.globl _P3_1
                                     61 	.globl _P3_0
                                     62 	.globl _EA
                                     63 	.globl _ES
                                     64 	.globl _ET1
                                     65 	.globl _EX1
                                     66 	.globl _ET0
                                     67 	.globl _EX0
                                     68 	.globl _P2_7
                                     69 	.globl _P2_6
                                     70 	.globl _P2_5
                                     71 	.globl _P2_4
                                     72 	.globl _P2_3
                                     73 	.globl _P2_2
                                     74 	.globl _P2_1
                                     75 	.globl _P2_0
                                     76 	.globl _SM0
                                     77 	.globl _SM1
                                     78 	.globl _SM2
                                     79 	.globl _REN
                                     80 	.globl _TB8
                                     81 	.globl _RB8
                                     82 	.globl _TI
                                     83 	.globl _RI
                                     84 	.globl _P1_7
                                     85 	.globl _P1_6
                                     86 	.globl _P1_5
                                     87 	.globl _P1_4
                                     88 	.globl _P1_3
                                     89 	.globl _P1_2
                                     90 	.globl _P1_1
                                     91 	.globl _P1_0
                                     92 	.globl _TF1
                                     93 	.globl _TR1
                                     94 	.globl _TF0
                                     95 	.globl _TR0
                                     96 	.globl _IE1
                                     97 	.globl _IT1
                                     98 	.globl _IE0
                                     99 	.globl _IT0
                                    100 	.globl _P0_7
                                    101 	.globl _P0_6
                                    102 	.globl _P0_5
                                    103 	.globl _P0_4
                                    104 	.globl _P0_3
                                    105 	.globl _P0_2
                                    106 	.globl _P0_1
                                    107 	.globl _P0_0
                                    108 	.globl _TH2
                                    109 	.globl _TL2
                                    110 	.globl _RCAP2H
                                    111 	.globl _RCAP2L
                                    112 	.globl _T2CON
                                    113 	.globl _B
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _IP
                                    117 	.globl _P3
                                    118 	.globl _IE
                                    119 	.globl _P2
                                    120 	.globl _SBUF
                                    121 	.globl _SCON
                                    122 	.globl _P1
                                    123 	.globl _TH1
                                    124 	.globl _TH0
                                    125 	.globl _TL1
                                    126 	.globl _TL0
                                    127 	.globl _TMOD
                                    128 	.globl _TCON
                                    129 	.globl _PCON
                                    130 	.globl _DPH
                                    131 	.globl _DPL
                                    132 	.globl _SP
                                    133 	.globl _P0
                                    134 	.globl _disp
                                    135 	.globl _num
                                    136 	.globl _Delay
                                    137 	.globl _Datepros
                                    138 	.globl _DigDisplay
                                    139 	.globl _Keypros
                                    140 ;--------------------------------------------------------
                                    141 ; special function registers
                                    142 ;--------------------------------------------------------
                                    143 	.area RSEG    (ABS,DATA)
      000000                        144 	.org 0x0000
                           000080   145 _P0	=	0x0080
                           000081   146 _SP	=	0x0081
                           000082   147 _DPL	=	0x0082
                           000083   148 _DPH	=	0x0083
                           000087   149 _PCON	=	0x0087
                           000088   150 _TCON	=	0x0088
                           000089   151 _TMOD	=	0x0089
                           00008A   152 _TL0	=	0x008a
                           00008B   153 _TL1	=	0x008b
                           00008C   154 _TH0	=	0x008c
                           00008D   155 _TH1	=	0x008d
                           000090   156 _P1	=	0x0090
                           000098   157 _SCON	=	0x0098
                           000099   158 _SBUF	=	0x0099
                           0000A0   159 _P2	=	0x00a0
                           0000A8   160 _IE	=	0x00a8
                           0000B0   161 _P3	=	0x00b0
                           0000B8   162 _IP	=	0x00b8
                           0000D0   163 _PSW	=	0x00d0
                           0000E0   164 _ACC	=	0x00e0
                           0000F0   165 _B	=	0x00f0
                           0000C8   166 _T2CON	=	0x00c8
                           0000CA   167 _RCAP2L	=	0x00ca
                           0000CB   168 _RCAP2H	=	0x00cb
                           0000CC   169 _TL2	=	0x00cc
                           0000CD   170 _TH2	=	0x00cd
                                    171 ;--------------------------------------------------------
                                    172 ; special function bits
                                    173 ;--------------------------------------------------------
                                    174 	.area RSEG    (ABS,DATA)
      000000                        175 	.org 0x0000
                           000080   176 _P0_0	=	0x0080
                           000081   177 _P0_1	=	0x0081
                           000082   178 _P0_2	=	0x0082
                           000083   179 _P0_3	=	0x0083
                           000084   180 _P0_4	=	0x0084
                           000085   181 _P0_5	=	0x0085
                           000086   182 _P0_6	=	0x0086
                           000087   183 _P0_7	=	0x0087
                           000088   184 _IT0	=	0x0088
                           000089   185 _IE0	=	0x0089
                           00008A   186 _IT1	=	0x008a
                           00008B   187 _IE1	=	0x008b
                           00008C   188 _TR0	=	0x008c
                           00008D   189 _TF0	=	0x008d
                           00008E   190 _TR1	=	0x008e
                           00008F   191 _TF1	=	0x008f
                           000090   192 _P1_0	=	0x0090
                           000091   193 _P1_1	=	0x0091
                           000092   194 _P1_2	=	0x0092
                           000093   195 _P1_3	=	0x0093
                           000094   196 _P1_4	=	0x0094
                           000095   197 _P1_5	=	0x0095
                           000096   198 _P1_6	=	0x0096
                           000097   199 _P1_7	=	0x0097
                           000098   200 _RI	=	0x0098
                           000099   201 _TI	=	0x0099
                           00009A   202 _RB8	=	0x009a
                           00009B   203 _TB8	=	0x009b
                           00009C   204 _REN	=	0x009c
                           00009D   205 _SM2	=	0x009d
                           00009E   206 _SM1	=	0x009e
                           00009F   207 _SM0	=	0x009f
                           0000A0   208 _P2_0	=	0x00a0
                           0000A1   209 _P2_1	=	0x00a1
                           0000A2   210 _P2_2	=	0x00a2
                           0000A3   211 _P2_3	=	0x00a3
                           0000A4   212 _P2_4	=	0x00a4
                           0000A5   213 _P2_5	=	0x00a5
                           0000A6   214 _P2_6	=	0x00a6
                           0000A7   215 _P2_7	=	0x00a7
                           0000A8   216 _EX0	=	0x00a8
                           0000A9   217 _ET0	=	0x00a9
                           0000AA   218 _EX1	=	0x00aa
                           0000AB   219 _ET1	=	0x00ab
                           0000AC   220 _ES	=	0x00ac
                           0000AF   221 _EA	=	0x00af
                           0000B0   222 _P3_0	=	0x00b0
                           0000B1   223 _P3_1	=	0x00b1
                           0000B2   224 _P3_2	=	0x00b2
                           0000B3   225 _P3_3	=	0x00b3
                           0000B4   226 _P3_4	=	0x00b4
                           0000B5   227 _P3_5	=	0x00b5
                           0000B6   228 _P3_6	=	0x00b6
                           0000B7   229 _P3_7	=	0x00b7
                           0000B0   230 _RXD	=	0x00b0
                           0000B1   231 _TXD	=	0x00b1
                           0000B2   232 _INT0	=	0x00b2
                           0000B3   233 _INT1	=	0x00b3
                           0000B4   234 _T0	=	0x00b4
                           0000B5   235 _T1	=	0x00b5
                           0000B6   236 _WR	=	0x00b6
                           0000B7   237 _RD	=	0x00b7
                           0000B8   238 _PX0	=	0x00b8
                           0000B9   239 _PT0	=	0x00b9
                           0000BA   240 _PX1	=	0x00ba
                           0000BB   241 _PT1	=	0x00bb
                           0000BC   242 _PS	=	0x00bc
                           0000D0   243 _P	=	0x00d0
                           0000D1   244 _F1	=	0x00d1
                           0000D2   245 _OV	=	0x00d2
                           0000D3   246 _RS0	=	0x00d3
                           0000D4   247 _RS1	=	0x00d4
                           0000D5   248 _F0	=	0x00d5
                           0000D6   249 _AC	=	0x00d6
                           0000D7   250 _CY	=	0x00d7
                           0000AD   251 _ET2	=	0x00ad
                           0000BD   252 _PT2	=	0x00bd
                           0000C8   253 _T2CON_0	=	0x00c8
                           0000C9   254 _T2CON_1	=	0x00c9
                           0000CA   255 _T2CON_2	=	0x00ca
                           0000CB   256 _T2CON_3	=	0x00cb
                           0000CC   257 _T2CON_4	=	0x00cc
                           0000CD   258 _T2CON_5	=	0x00cd
                           0000CE   259 _T2CON_6	=	0x00ce
                           0000CF   260 _T2CON_7	=	0x00cf
                           0000C8   261 _CP_RL2	=	0x00c8
                           0000C9   262 _C_T2	=	0x00c9
                           0000CA   263 _TR2	=	0x00ca
                           0000CB   264 _EXEN2	=	0x00cb
                           0000CC   265 _TCLK	=	0x00cc
                           0000CD   266 _RCLK	=	0x00cd
                           0000CE   267 _EXF2	=	0x00ce
                           0000CF   268 _TF2	=	0x00cf
                                    269 ;--------------------------------------------------------
                                    270 ; overlayable register banks
                                    271 ;--------------------------------------------------------
                                    272 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        273 	.ds 8
                                    274 ;--------------------------------------------------------
                                    275 ; internal ram data
                                    276 ;--------------------------------------------------------
                                    277 	.area DSEG    (DATA)
      000000                        278 _num::
      000000                        279 	.ds 1
      000001                        280 _disp::
      000001                        281 	.ds 4
                                    282 ;--------------------------------------------------------
                                    283 ; overlayable items in internal ram 
                                    284 ;--------------------------------------------------------
                                    285 	.area	OSEG    (OVR,DATA)
                                    286 	.area	OSEG    (OVR,DATA)
                                    287 ;--------------------------------------------------------
                                    288 ; Stack segment in internal ram 
                                    289 ;--------------------------------------------------------
                                    290 	.area	SSEG
      000000                        291 __start__stack:
      000000                        292 	.ds	1
                                    293 
                                    294 ;--------------------------------------------------------
                                    295 ; indirectly addressable internal ram data
                                    296 ;--------------------------------------------------------
                                    297 	.area ISEG    (DATA)
                                    298 ;--------------------------------------------------------
                                    299 ; absolute internal ram data
                                    300 ;--------------------------------------------------------
                                    301 	.area IABS    (ABS,DATA)
                                    302 	.area IABS    (ABS,DATA)
                                    303 ;--------------------------------------------------------
                                    304 ; bit data
                                    305 ;--------------------------------------------------------
                                    306 	.area BSEG    (BIT)
                                    307 ;--------------------------------------------------------
                                    308 ; paged external ram data
                                    309 ;--------------------------------------------------------
                                    310 	.area PSEG    (PAG,XDATA)
                                    311 ;--------------------------------------------------------
                                    312 ; external ram data
                                    313 ;--------------------------------------------------------
                                    314 	.area XSEG    (XDATA)
                                    315 ;--------------------------------------------------------
                                    316 ; absolute external ram data
                                    317 ;--------------------------------------------------------
                                    318 	.area XABS    (ABS,XDATA)
                                    319 ;--------------------------------------------------------
                                    320 ; external initialized ram data
                                    321 ;--------------------------------------------------------
                                    322 	.area XISEG   (XDATA)
                                    323 	.area HOME    (CODE)
                                    324 	.area GSINIT0 (CODE)
                                    325 	.area GSINIT1 (CODE)
                                    326 	.area GSINIT2 (CODE)
                                    327 	.area GSINIT3 (CODE)
                                    328 	.area GSINIT4 (CODE)
                                    329 	.area GSINIT5 (CODE)
                                    330 	.area GSINIT  (CODE)
                                    331 	.area GSFINAL (CODE)
                                    332 	.area CSEG    (CODE)
                                    333 ;--------------------------------------------------------
                                    334 ; interrupt vector 
                                    335 ;--------------------------------------------------------
                                    336 	.area HOME    (CODE)
      000000                        337 __interrupt_vect:
      000000 02r00r00         [24]  338 	ljmp	__sdcc_gsinit_startup
                                    339 ;--------------------------------------------------------
                                    340 ; global & static initialisations
                                    341 ;--------------------------------------------------------
                                    342 	.area HOME    (CODE)
                                    343 	.area GSINIT  (CODE)
                                    344 	.area GSFINAL (CODE)
                                    345 	.area GSINIT  (CODE)
                                    346 	.globl __sdcc_gsinit_startup
                                    347 	.globl __sdcc_program_startup
                                    348 	.globl __start__stack
                                    349 	.globl __mcs51_genXINIT
                                    350 	.globl __mcs51_genXRAMCLEAR
                                    351 	.globl __mcs51_genRAMCLEAR
                                    352 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  353 	ljmp	__sdcc_program_startup
                                    354 ;--------------------------------------------------------
                                    355 ; Home
                                    356 ;--------------------------------------------------------
                                    357 	.area HOME    (CODE)
                                    358 	.area HOME    (CODE)
      000003                        359 __sdcc_program_startup:
      000003 02r00r00         [24]  360 	ljmp	_main
                                    361 ;	return from main will return to caller
                                    362 ;--------------------------------------------------------
                                    363 ; code
                                    364 ;--------------------------------------------------------
                                    365 	.area CSEG    (CODE)
                                    366 ;------------------------------------------------------------
                                    367 ;Allocation info for local variables in function 'main'
                                    368 ;------------------------------------------------------------
                                    369 ;	main.c:21: void main()
                                    370 ;	-----------------------------------------
                                    371 ;	 function main
                                    372 ;	-----------------------------------------
      000000                        373 _main:
                           000007   374 	ar7 = 0x07
                           000006   375 	ar6 = 0x06
                           000005   376 	ar5 = 0x05
                           000004   377 	ar4 = 0x04
                           000003   378 	ar3 = 0x03
                           000002   379 	ar2 = 0x02
                           000001   380 	ar1 = 0x01
                           000000   381 	ar0 = 0x00
                                    382 ;	main.c:23: while(1)
      000000                        383 00102$:
                                    384 ;	main.c:25: Keypros();
      000000 12r01r25         [24]  385 	lcall	_Keypros
                                    386 ;	main.c:26: Datepros();
      000003 12r00r1D         [24]  387 	lcall	_Datepros
                                    388 ;	main.c:27: DigDisplay();
      000006 12r00rDB         [24]  389 	lcall	_DigDisplay
                                    390 ;	main.c:29: }
      000009 80 F5            [24]  391 	sjmp	00102$
                                    392 ;------------------------------------------------------------
                                    393 ;Allocation info for local variables in function 'Delay'
                                    394 ;------------------------------------------------------------
                                    395 ;i                         Allocated to registers 
                                    396 ;------------------------------------------------------------
                                    397 ;	main.c:31: void Delay(unsigned int i)
                                    398 ;	-----------------------------------------
                                    399 ;	 function Delay
                                    400 ;	-----------------------------------------
      00000B                        401 _Delay:
      00000B AE 82            [24]  402 	mov	r6,dpl
      00000D AF 83            [24]  403 	mov	r7,dph
                                    404 ;	main.c:33: while(i--);
      00000F                        405 00101$:
      00000F 8E 04            [24]  406 	mov	ar4,r6
      000011 8F 05            [24]  407 	mov	ar5,r7
      000013 1E               [12]  408 	dec	r6
      000014 BE FF 01         [24]  409 	cjne	r6,#0xff,00111$
      000017 1F               [12]  410 	dec	r7
      000018                        411 00111$:
      000018 EC               [12]  412 	mov	a,r4
      000019 4D               [12]  413 	orl	a,r5
      00001A 70 F3            [24]  414 	jnz	00101$
                                    415 ;	main.c:34: }
      00001C 22               [24]  416 	ret
                                    417 ;------------------------------------------------------------
                                    418 ;Allocation info for local variables in function 'Datepros'
                                    419 ;------------------------------------------------------------
                                    420 ;	main.c:36: void Datepros()
                                    421 ;	-----------------------------------------
                                    422 ;	 function Datepros
                                    423 ;	-----------------------------------------
      00001D                        424 _Datepros:
                                    425 ;	main.c:38: disp[0]=smgduan[num/1000];
      00001D AE*00            [24]  426 	mov	r6,_num
      00001F 7F 00            [12]  427 	mov	r7,#0x00
      000021 75*00 E8         [24]  428 	mov	__divsint_PARM_2,#0xe8
      000024 75*01 03         [24]  429 	mov	(__divsint_PARM_2 + 1),#0x03
      000027 8E 82            [24]  430 	mov	dpl,r6
      000029 8F 83            [24]  431 	mov	dph,r7
      00002B 12r00r00         [24]  432 	lcall	__divsint
      00002E AE 82            [24]  433 	mov	r6,dpl
      000030 AF 83            [24]  434 	mov	r7,dph
      000032 EE               [12]  435 	mov	a,r6
      000033 24r00            [12]  436 	add	a,#_smgduan
      000035 F5 82            [12]  437 	mov	dpl,a
      000037 EF               [12]  438 	mov	a,r7
      000038 34s00            [12]  439 	addc	a,#(_smgduan >> 8)
      00003A F5 83            [12]  440 	mov	dph,a
      00003C E4               [12]  441 	clr	a
      00003D 93               [24]  442 	movc	a,@a+dptr
      00003E FF               [12]  443 	mov	r7,a
      00003F 8F*01            [24]  444 	mov	_disp,r7
                                    445 ;	main.c:39: disp[1]=smgduan[num%1000/100];
      000041 AE*00            [24]  446 	mov	r6,_num
      000043 7F 00            [12]  447 	mov	r7,#0x00
      000045 75*00 E8         [24]  448 	mov	__modsint_PARM_2,#0xe8
      000048 75*01 03         [24]  449 	mov	(__modsint_PARM_2 + 1),#0x03
      00004B 8E 82            [24]  450 	mov	dpl,r6
      00004D 8F 83            [24]  451 	mov	dph,r7
      00004F 12r00r00         [24]  452 	lcall	__modsint
      000052 75*00 64         [24]  453 	mov	__divsint_PARM_2,#0x64
      000055 75*01 00         [24]  454 	mov	(__divsint_PARM_2 + 1),#0x00
      000058 12r00r00         [24]  455 	lcall	__divsint
      00005B AE 82            [24]  456 	mov	r6,dpl
      00005D AF 83            [24]  457 	mov	r7,dph
      00005F EE               [12]  458 	mov	a,r6
      000060 24r00            [12]  459 	add	a,#_smgduan
      000062 F5 82            [12]  460 	mov	dpl,a
      000064 EF               [12]  461 	mov	a,r7
      000065 34s00            [12]  462 	addc	a,#(_smgduan >> 8)
      000067 F5 83            [12]  463 	mov	dph,a
      000069 E4               [12]  464 	clr	a
      00006A 93               [24]  465 	movc	a,@a+dptr
      00006B FF               [12]  466 	mov	r7,a
      00006C 8F*02            [24]  467 	mov	(_disp + 0x0001),r7
                                    468 ;	main.c:40: disp[2]=smgduan[num%1000%100/10];
      00006E AE*00            [24]  469 	mov	r6,_num
      000070 7F 00            [12]  470 	mov	r7,#0x00
      000072 75*00 E8         [24]  471 	mov	__modsint_PARM_2,#0xe8
      000075 75*01 03         [24]  472 	mov	(__modsint_PARM_2 + 1),#0x03
      000078 8E 82            [24]  473 	mov	dpl,r6
      00007A 8F 83            [24]  474 	mov	dph,r7
      00007C 12r00r00         [24]  475 	lcall	__modsint
      00007F 75*00 64         [24]  476 	mov	__modsint_PARM_2,#0x64
      000082 75*01 00         [24]  477 	mov	(__modsint_PARM_2 + 1),#0x00
      000085 12r00r00         [24]  478 	lcall	__modsint
      000088 75*00 0A         [24]  479 	mov	__divsint_PARM_2,#0x0a
      00008B 75*01 00         [24]  480 	mov	(__divsint_PARM_2 + 1),#0x00
      00008E 12r00r00         [24]  481 	lcall	__divsint
      000091 AE 82            [24]  482 	mov	r6,dpl
      000093 AF 83            [24]  483 	mov	r7,dph
      000095 EE               [12]  484 	mov	a,r6
      000096 24r00            [12]  485 	add	a,#_smgduan
      000098 F5 82            [12]  486 	mov	dpl,a
      00009A EF               [12]  487 	mov	a,r7
      00009B 34s00            [12]  488 	addc	a,#(_smgduan >> 8)
      00009D F5 83            [12]  489 	mov	dph,a
      00009F E4               [12]  490 	clr	a
      0000A0 93               [24]  491 	movc	a,@a+dptr
      0000A1 FF               [12]  492 	mov	r7,a
      0000A2 8F*03            [24]  493 	mov	(_disp + 0x0002),r7
                                    494 ;	main.c:41: disp[3]=smgduan[num%1000%100%10];
      0000A4 AE*00            [24]  495 	mov	r6,_num
      0000A6 7F 00            [12]  496 	mov	r7,#0x00
      0000A8 75*00 E8         [24]  497 	mov	__modsint_PARM_2,#0xe8
      0000AB 75*01 03         [24]  498 	mov	(__modsint_PARM_2 + 1),#0x03
      0000AE 8E 82            [24]  499 	mov	dpl,r6
      0000B0 8F 83            [24]  500 	mov	dph,r7
      0000B2 12r00r00         [24]  501 	lcall	__modsint
      0000B5 75*00 64         [24]  502 	mov	__modsint_PARM_2,#0x64
      0000B8 75*01 00         [24]  503 	mov	(__modsint_PARM_2 + 1),#0x00
      0000BB 12r00r00         [24]  504 	lcall	__modsint
      0000BE 75*00 0A         [24]  505 	mov	__modsint_PARM_2,#0x0a
      0000C1 75*01 00         [24]  506 	mov	(__modsint_PARM_2 + 1),#0x00
      0000C4 12r00r00         [24]  507 	lcall	__modsint
      0000C7 AE 82            [24]  508 	mov	r6,dpl
      0000C9 AF 83            [24]  509 	mov	r7,dph
      0000CB EE               [12]  510 	mov	a,r6
      0000CC 24r00            [12]  511 	add	a,#_smgduan
      0000CE F5 82            [12]  512 	mov	dpl,a
      0000D0 EF               [12]  513 	mov	a,r7
      0000D1 34s00            [12]  514 	addc	a,#(_smgduan >> 8)
      0000D3 F5 83            [12]  515 	mov	dph,a
      0000D5 E4               [12]  516 	clr	a
      0000D6 93               [24]  517 	movc	a,@a+dptr
      0000D7 FF               [12]  518 	mov	r7,a
      0000D8 8F*04            [24]  519 	mov	(_disp + 0x0003),r7
                                    520 ;	main.c:42: }
      0000DA 22               [24]  521 	ret
                                    522 ;------------------------------------------------------------
                                    523 ;Allocation info for local variables in function 'DigDisplay'
                                    524 ;------------------------------------------------------------
                                    525 ;i                         Allocated to registers r7 
                                    526 ;k                         Allocated to registers r6 
                                    527 ;------------------------------------------------------------
                                    528 ;	main.c:44: void DigDisplay()
                                    529 ;	-----------------------------------------
                                    530 ;	 function DigDisplay
                                    531 ;	-----------------------------------------
      0000DB                        532 _DigDisplay:
                                    533 ;	main.c:47: for(i=0;i<4;i++)
      0000DB 7F 00            [12]  534 	mov	r7,#0x00
      0000DD                        535 00111$:
                                    536 ;	main.c:49: switch(i)	 //位选，选择点亮的数码管，
      0000DD EF               [12]  537 	mov	a,r7
      0000DE 24 FC            [12]  538 	add	a,#0xff - 0x03
      0000E0 40 2C            [24]  539 	jc	00105$
      0000E2 EF               [12]  540 	mov	a,r7
      0000E3 2F               [12]  541 	add	a,r7
                                    542 ;	main.c:51: case(0):LSA=1;LSB=1;LSC=0; break;//显示第4位 110
      0000E4 90r00rE8         [24]  543 	mov	dptr,#00133$
      0000E7 73               [24]  544 	jmp	@a+dptr
      0000E8                        545 00133$:
      0000E8 80 06            [24]  546 	sjmp	00101$
      0000EA 80 0C            [24]  547 	sjmp	00102$
      0000EC 80 12            [24]  548 	sjmp	00103$
      0000EE 80 18            [24]  549 	sjmp	00104$
      0000F0                        550 00101$:
                                    551 ;	assignBit
      0000F0 D2 A2            [12]  552 	setb	_P2_2
                                    553 ;	assignBit
      0000F2 D2 A3            [12]  554 	setb	_P2_3
                                    555 ;	assignBit
      0000F4 C2 A4            [12]  556 	clr	_P2_4
                                    557 ;	main.c:52: case(1):LSA=0;LSB=1;LSC=0; break;//显示第5位 010
      0000F6 80 16            [24]  558 	sjmp	00105$
      0000F8                        559 00102$:
                                    560 ;	assignBit
      0000F8 C2 A2            [12]  561 	clr	_P2_2
                                    562 ;	assignBit
      0000FA D2 A3            [12]  563 	setb	_P2_3
                                    564 ;	assignBit
      0000FC C2 A4            [12]  565 	clr	_P2_4
                                    566 ;	main.c:53: case(2):LSA=1;LSB=0;LSC=0; break;//显示第6位 100
      0000FE 80 0E            [24]  567 	sjmp	00105$
      000100                        568 00103$:
                                    569 ;	assignBit
      000100 D2 A2            [12]  570 	setb	_P2_2
                                    571 ;	assignBit
      000102 C2 A3            [12]  572 	clr	_P2_3
                                    573 ;	assignBit
      000104 C2 A4            [12]  574 	clr	_P2_4
                                    575 ;	main.c:54: case(3):LSA=0;LSB=0;LSC=0; break;//显示第7位 000
      000106 80 06            [24]  576 	sjmp	00105$
      000108                        577 00104$:
                                    578 ;	assignBit
      000108 C2 A2            [12]  579 	clr	_P2_2
                                    580 ;	assignBit
      00010A C2 A3            [12]  581 	clr	_P2_3
                                    582 ;	assignBit
      00010C C2 A4            [12]  583 	clr	_P2_4
                                    584 ;	main.c:55: }
      00010E                        585 00105$:
                                    586 ;	main.c:56: P0=disp[i];//发送段码
      00010E EF               [12]  587 	mov	a,r7
      00010F 24r01            [12]  588 	add	a,#_disp
      000111 F9               [12]  589 	mov	r1,a
      000112 87 80            [24]  590 	mov	_P0,@r1
                                    591 ;	main.c:57: for(k=0;k<100;k++); //间隔一段时间扫描	
      000114 7E 64            [12]  592 	mov	r6,#0x64
      000116                        593 00110$:
      000116 EE               [12]  594 	mov	a,r6
      000117 14               [12]  595 	dec	a
      000118 FD               [12]  596 	mov	r5,a
      000119 FE               [12]  597 	mov	r6,a
                                    598 ;	main.c:58: P0=0x00;//消隐
      00011A 70 FA            [24]  599 	jnz	00110$
      00011C F5 80            [12]  600 	mov	_P0,a
                                    601 ;	main.c:47: for(i=0;i<4;i++)
      00011E 0F               [12]  602 	inc	r7
      00011F BF 04 00         [24]  603 	cjne	r7,#0x04,00135$
      000122                        604 00135$:
      000122 40 B9            [24]  605 	jc	00111$
                                    606 ;	main.c:60: }
      000124 22               [24]  607 	ret
                                    608 ;------------------------------------------------------------
                                    609 ;Allocation info for local variables in function 'Keypros'
                                    610 ;------------------------------------------------------------
                                    611 ;	main.c:62: void Keypros()
                                    612 ;	-----------------------------------------
                                    613 ;	 function Keypros
                                    614 ;	-----------------------------------------
      000125                        615 _Keypros:
                                    616 ;	main.c:64: if(k1==0)
      000125 20 B1 15         [24]  617 	jb	_P3_1,00107$
                                    618 ;	main.c:66: Delay(1000);
      000128 90 03 E8         [24]  619 	mov	dptr,#0x03e8
      00012B 12r00r0B         [24]  620 	lcall	_Delay
                                    621 ;	main.c:67: if(k1==0) At24c02Write(1,num);	//在地址1内写入数据num
      00012E 20 B1 09         [24]  622 	jb	_P3_1,00103$
      000131 85*00*00         [24]  623 	mov	_At24c02Write_PARM_2,_num
      000134 75 82 01         [24]  624 	mov	dpl,#0x01
      000137 12r00r00         [24]  625 	lcall	_At24c02Write
                                    626 ;	main.c:68: while(!k1);
      00013A                        627 00103$:
      00013A 30 B1 FD         [24]  628 	jnb	_P3_1,00103$
      00013D                        629 00107$:
                                    630 ;	main.c:70: if(k2==0)
      00013D 20 B0 15         [24]  631 	jb	_P3_0,00114$
                                    632 ;	main.c:72: Delay(1000);
      000140 90 03 E8         [24]  633 	mov	dptr,#0x03e8
      000143 12r00r0B         [24]  634 	lcall	_Delay
                                    635 ;	main.c:73: if(k2==0) num=At24c02Read(1);	//读取EEPROM地址1内的数据保存在num中
      000146 20 B0 09         [24]  636 	jb	_P3_0,00110$
      000149 75 82 01         [24]  637 	mov	dpl,#0x01
      00014C 12r00r00         [24]  638 	lcall	_At24c02Read
      00014F 85 82*00         [24]  639 	mov	_num,dpl
                                    640 ;	main.c:74: while(!k2);
      000152                        641 00110$:
      000152 30 B0 FD         [24]  642 	jnb	_P3_0,00110$
      000155                        643 00114$:
                                    644 ;	main.c:76: if(k3==0)
      000155 20 B2 17         [24]  645 	jb	_P3_2,00123$
                                    646 ;	main.c:78: Delay(1000);
      000158 90 03 E8         [24]  647 	mov	dptr,#0x03e8
      00015B 12r00r0B         [24]  648 	lcall	_Delay
                                    649 ;	main.c:79: if(k3==0)
      00015E 20 B2 0B         [24]  650 	jb	_P3_2,00119$
                                    651 ;	main.c:81: num++;
      000161 05*00            [12]  652 	inc	_num
                                    653 ;	main.c:82: if(num>=255) num=0;
      000163 74 01            [12]  654 	mov	a,#0x100 - 0xff
      000165 25*00            [12]  655 	add	a,_num
      000167 50 03            [24]  656 	jnc	00119$
      000169 75*00 00         [24]  657 	mov	_num,#0x00
                                    658 ;	main.c:84: while(!k3);
      00016C                        659 00119$:
      00016C 30 B2 FD         [24]  660 	jnb	_P3_2,00119$
      00016F                        661 00123$:
                                    662 ;	main.c:86: if(k4==0)
      00016F 20 B3 0F         [24]  663 	jb	_P3_3,00131$
                                    664 ;	main.c:88: Delay(1000);
      000172 90 03 E8         [24]  665 	mov	dptr,#0x03e8
      000175 12r00r0B         [24]  666 	lcall	_Delay
                                    667 ;	main.c:89: if(k4==0) num=0;
      000178 20 B3 03         [24]  668 	jb	_P3_3,00126$
      00017B 75*00 00         [24]  669 	mov	_num,#0x00
                                    670 ;	main.c:90: while(!k4);
      00017E                        671 00126$:
      00017E 30 B3 FD         [24]  672 	jnb	_P3_3,00126$
      000181                        673 00131$:
                                    674 ;	main.c:92: }
      000181 22               [24]  675 	ret
                                    676 	.area CSEG    (CODE)
                                    677 	.area CONST   (CODE)
      000000                        678 _smgduan:
      000000 3F                     679 	.db #0x3f	; 63
      000001 06                     680 	.db #0x06	; 6
      000002 5B                     681 	.db #0x5b	; 91
      000003 4F                     682 	.db #0x4f	; 79	'O'
      000004 66                     683 	.db #0x66	; 102	'f'
      000005 6D                     684 	.db #0x6d	; 109	'm'
      000006 7D                     685 	.db #0x7d	; 125
      000007 07                     686 	.db #0x07	; 7
      000008 7F                     687 	.db #0x7f	; 127
      000009 6F                     688 	.db #0x6f	; 111	'o'
      00000A 77                     689 	.db #0x77	; 119	'w'
      00000B 7C                     690 	.db #0x7c	; 124
      00000C 39                     691 	.db #0x39	; 57	'9'
      00000D 5E                     692 	.db #0x5e	; 94
      00000E 79                     693 	.db #0x79	; 121	'y'
      00000F 71                     694 	.db #0x71	; 113	'q'
      000010 00                     695 	.db 0x00
                                    696 	.area XINIT   (CODE)
                                    697 	.area CABS    (ABS,CODE)
